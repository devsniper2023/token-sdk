apply plugin: 'kotlin-jpa'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    targetPlatformVersion 4
    minimumPlatformVersion 4
    workflow {
        name "Token SDK Workflows"
        vendor "R3"
        licence "Apache 2"
        versionId 1
    }
    signing {
        enabled false
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


dependencies {
    // Kotlin.
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"

    // Logging.
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"

    // Testing.
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "junit:junit:$junit_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // CorDapp dependencies.
    cordapp project(":contract")
    cordapp project(":modules:money")
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId 'com.r3.corda.sdk.token'
        artifactId 'token-sdk-workflow'
        inceptionYear '2019'
        packaging 'jar'
        licenses {
            license {
                name 'Apache 2.0'
                url 'https://www.apache.org/licenses/LICENSE-2.0'
                distribution 'repo'
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}